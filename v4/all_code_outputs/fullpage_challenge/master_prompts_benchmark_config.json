{
    "benchmark_run_name": "FullPageChallenge_v1",
    "prompts": [
        {
            "prompt_id": "FPC001_Personal_Portfolio_Landing_Page",
            "prompt_description": "Design and implement a complete, responsive single-page personal portfolio landing page for a web developer named 'Alex Doe'. \n\n**Page Sections & Content:**\n1.  **Hero Section:** \n    *   A compelling headline (e.g., 'Alex Doe - Creative Web Developer').\n    *   A brief introductory paragraph.\n    *   A call-to-action button (e.g., 'View My Work') that smoothly scrolls to the 'Projects' section. This button should be identifiable for testing as `data-testid='cta-view-work'`. \n    *   Include a professional-looking placeholder image or illustration.\n2.  **About Me Section:**\n    *   A more detailed description of Alex's skills, experience, and passion for web development. \n    *   Consider a two-column layout for text and perhaps a smaller image or relevant icons representing skills.\n3.  **Projects Section (Identifiable as `projects-section` for scrolling):**\n    *   Showcase at least 3 fictional projects. Each project should be a 'card' displaying:\n        *   Project Title (e.g., 'E-commerce Platform Redesign').\n        *   A short description.\n        *   Technologies used (e.g., React, Node.js, Figma).\n        *   A link to 'View Project' (can be a '#' link). Each project card should be identifiable for testing with `data-testid='project-card-N'` (N being 1, 2, 3).\n4.  **Contact Section:**\n    *   A simple contact form with fields for 'Name', 'Email', and 'Message'. The form should be identifiable as `data-testid='contact-form'`. \n    *   Include a submit button. (No backend logic needed, just the front-end structure and basic client-side validation hints like `required` attributes).\n5.  **Footer:** \n    *   Copyright information (e.g., 'Â© [Current Year] Alex Doe').\n    *   Links to social media profiles (e.g., GitHub, LinkedIn - use placeholder icons and '#' links).\n\n**Technical & Accessibility Requirements:**\n*   The entire page MUST be structured with semantic HTML5 (header, nav (if any global nav), main, article, section, footer).\n*   A clear H1 for the main page title (likely in the Hero section).\n*   Heading hierarchy MUST be logical throughout the page.\n*   All images MUST have appropriate `alt` text.\n*   Interactive elements (buttons, links, form fields) MUST be keyboard accessible and have clear focus indicators.\n*   The page MUST be responsive across common device sizes (mobile, tablet, desktop).\n*   Smooth scrolling for the 'View My Work' CTA is required.\n*   Use Tailwind CSS for general layout and styling, but feel free to add minimal custom CSS in a `<style>` tag if necessary for unique design elements or animations that are hard to achieve with Tailwind alone (e.g., subtle hover effects on project cards, the smooth scroll implementation if not CSS-only).\n\n**Testing Identifiers (Ensure these are implemented):**\n*   Hero CTA button: `data-testid='cta-view-work'`\n*   Projects section (for scrolling target): `id='projects-section'` (Note: ID for scrolling, not data-testid unless also desired)\n*   Project cards: `data-testid='project-card-1'`, `data-testid='project-card-2'`, etc.\n*   Contact form: `data-testid='contact-form'`\n*   Main page navigation (if present): `data-testid='main-navigation'`",
            "viewports_to_test": {"desktop": [1440, 900], "mobile": [390, 844]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Semantic Header", "selector": "body > header", "points": 2},
                {"type": "element_presence", "name": "Semantic Main", "selector": "body > main", "points": 2},
                {"type": "element_presence", "name": "Semantic Footer", "selector": "body > footer", "points": 2},
                {"type": "element_presence", "name": "H1 on Page", "selector": "h1", "points": 2},
                {"type": "element_presence", "name": "Hero CTA Button", "selector": "button[data-testid='cta-view-work']", "points": 3},
                {"type": "element_presence", "name": "Projects Section ID", "selector": "#projects-section", "points": 2},
                {"type": "element_count", "name": "Project Cards (min 3)", "selector": "[data-testid^='project-card-']", "min_count": 3, "points": 3},
                {"type": "element_presence", "name": "Contact Form", "selector": "form[data-testid='contact-form']", "points": 2},
                {"type": "interaction", "name": "Smooth Scroll to Projects", "points": 5,
                    "trigger_element": {"selector": "button[data-testid='cta-view-work']"}, "action": {"type":"click"}, "wait_for_outcome_ms":1500, 
                    "expected_outcomes": [
                        {"outcome_type": "element_in_viewport", "element_selector": "#projects-section"}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Logical Heading Order (Basic Check)", "script": "const headings = Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, h6')); let prevLevel = 0; for (const h of headings) { const level = parseInt(h.tagName.substring(1)); if (level > prevLevel + 1 && prevLevel !==0) return false; prevLevel = level; } return true;", "points": 3, "note": "Simplified check; more robust checks are complex."},
                {"type": "custom_script_evaluates_true", "name": "All Images Have Alt Text", "script": "return Array.from(document.querySelectorAll('img')).every(img => img.alt && img.alt.trim() !== '');", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC002_Interactive_Recipe_Page",
            "prompt_description": "Create a feature-rich, responsive webpage for a recipe (e.g., 'Chocolate Lava Cakes'). The page should be highly interactive and user-friendly.\n\n**Page Structure & Content:**\n1.  **Recipe Header:** \n    *   Recipe Name (H1, identifiable as `data-testid='recipe-title'`).\n    *   A captivating image of the dish (ensure proper `alt` text).\n    *   Brief description, prep time, cook time, servings (e.g., 'Serves 4').\n2.  **Ingredients Section:**\n    *   A list of ingredients. Each ingredient should be a list item (`<li>`).\n    *   **Interactivity:** Allow users to check off ingredients as they gather them. Each `<li>` should contain a checkbox. Checking it should visually indicate completion (e.g., strikethrough text) and this state should be clearly communicated (e.g., `aria-checked` or a similar pattern for custom checkboxes).\n    *   The ingredients list container should be identifiable as `data-testid='ingredients-list'`.\n3.  **Instructions Section:**\n    *   Numbered steps for the recipe.\n    *   **Interactivity:** 'Timer' feature. For steps mentioning a time (e.g., 'Bake for 12-15 minutes'), include a small button next to the step (identifiable as `data-testid='timer-btn-stepX'`) that, when clicked, starts a countdown timer displayed on the page (identifiable as `data-testid='recipe-timer-display'`). The timer should visually update and provide an alert/notification when finished. Multiple timers should not interfere if started.\n4.  **Nutrition Information (Optional but good for TQ):**\n    *   A simple table displaying basic nutrition facts (calories, protein, fat, carbs).\n5.  **User Reviews/Comments (Structure Only):**\n    *   A section placeholder for user reviews, including a form to submit a new review (Name, Rating (1-5 stars - make these interactive, perhaps SVGs or radio buttons styled as stars), Comment).\n    *   The review submission form should be `data-testid='review-form'`.\n\n**Technical & Accessibility Requirements:**\n*   Full semantic HTML structure (header, main, article/section, aside (for nutrition?), footer).\n*   Responsive design ensuring readability and usability on all devices. The ingredients list and instructions must be easy to follow on mobile.\n*   All interactive elements (checkboxes, timer buttons, star ratings) MUST be fully keyboard accessible and provide clear visual feedback and ARIA states.\n*   The timer functionality requires JavaScript for countdown logic and notifications.\n*   If using Tailwind, supplement with custom CSS/JS for the interactive elements like the timer display, ingredient strikethrough, and star rating to ensure they meet the described UX and A11y.\n*   The page should be well-organized and visually appealing.\n\n**Testing Identifiers:**\n*   Recipe Title: `data-testid='recipe-title'`\n*   Ingredients List: `data-testid='ingredients-list'`\n*   Timer Button (example for step 1): `data-testid='timer-btn-step1'`\n*   Timer Display Area: `data-testid='recipe-timer-display'`\n*   Review Submission Form: `data-testid='review-form'`",
            "viewports_to_test": {"desktop": [1280, 1024], "mobile": [414, 896]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Recipe Title", "selector": "h1[data-testid='recipe-title']", "points": 2},
                {"type": "element_presence", "name": "Ingredients List", "selector": "[data-testid='ingredients-list']", "points": 2},
                {"type": "element_count", "name": "Ingredients Items (min 3)", "selector": "[data-testid='ingredients-list'] li input[type='checkbox']", "min_count": 3, "points": 2, "note": "Checks for checkboxes within list items"},
                {"type": "element_presence", "name": "Example Timer Button", "selector": "[data-testid^='timer-btn-step']", "points": 2, "note": "Checks if at least one timer button exists"},
                {"type": "element_presence", "name": "Timer Display Area", "selector": "[data-testid='recipe-timer-display']", "points": 2},
                {"type": "element_presence", "name": "Review Form", "selector": "form[data-testid='review-form']", "points": 2},
                {
                    "type": "interaction", "name": "Ingredient Check Off", "points": 5,
                    "trigger_element": {"selector": "[data-testid='ingredients-list'] li:first-child input[type='checkbox']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type": "custom_script_evaluates_true", "script": "const cb = document.querySelector(\"[data-testid='ingredients-list'] li:first-child input[type='checkbox']\"); const li = cb.closest('li'); return cb.checked && (li.classList.contains('completed') || getComputedStyle(li).textDecorationLine === 'line-through');"}

                    ]
                },
                {
                    "type": "interaction", "name": "Timer Starts and Updates (Visual check of display)", "points": 6,
                    "trigger_element": {"selector": "[data-testid^='timer-btn-step']:first-of-type"}, "action": {"type":"click"}, "wait_for_outcome_ms":2500, 
                    "expected_outcomes": [
                        {"outcome_type": "text_content_change_dynamic", "element_selector": "[data-testid='recipe-timer-display']", "initial_wait_ms": 500, "poll_interval_ms": 1000, "num_checks": 2, "note": "Checks if timer text changes over time, implying it's running."}

                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Star Rating is Interactive (basic check)", "script": "return !!document.querySelector(\"form[data-testid='review-form'] button[aria-label*='star'], form[data-testid='review-form'] input[type=radio][name=rating]\");", "points": 3, "note":"Checks for common star rating patterns"}
            ]
        },
        {
            "prompt_id": "FPC003_Dashboard_UI_with_Chart_and_Table",
            "prompt_description": "Create a responsive admin dashboard UI. The page should include a header, a collapsible sidebar navigation, and a main content area displaying key metrics, an interactive chart, and a data table.\n\n**Layout & Core Components:**\n1.  **Fixed Header:** Contains application title/logo and a user profile dropdown (basic structure, no complex auth). Identifiable as `data-testid='dashboard-header'`. The user profile trigger should be `data-testid='user-profile-trigger'`.\n2.  **Collapsible Sidebar Navigation:** \n    *   Include links like 'Dashboard', 'Analytics', 'Reports', 'Settings'. \n    *   The sidebar should be `data-testid='dashboard-sidebar'` and have `role='navigation'`. \n    *   It should be collapsible/expandable via a toggle button (`data-testid='sidebar-toggle'`), with state communicated via `aria-expanded` and visual change (e.g., width or transform). On mobile, it might be off-canvas by default.\n3.  **Main Content Area (`<main>` role):**\n    *   **Key Metrics Cards:** Display 3-4 cards showing summary statistics (e.g., 'Total Users: 1,234', 'Revenue: $56,789'). Each card identifiable `data-testid='metric-card-N'`.\n    *   **Interactive Chart:** Embed a simple bar chart (using a JS library like Chart.js CDN, or implement a basic SVG chart if feeling ambitious) showing sample data (e.g., 'Sales per Month'). The chart canvas/SVG container should be `data-testid='sales-chart'`. Ensure it has an accessible title/description.\n    *   **Data Table:** Display a sortable table of recent orders (Order ID, Customer Name, Date, Amount, Status). The table should be `data-testid='orders-table'`. Sorting should be available for 'Date' and 'Amount'. Column headers should use `aria-sort`. (Similar to C001 but integrated into a larger page).\n\n**Technical & Accessibility Requirements:**\n*   Full semantic HTML page structure. Logical heading hierarchy.\n*   The dashboard MUST be responsive. The chart and table need to adapt gracefully to smaller screens.\n*   All interactive elements (sidebar toggle, user menu, sortable table headers) must be keyboard accessible and provide clear ARIA states/feedback.\n*   Chart accessibility: Provide a text alternative or ensure the chart library used offers good default accessibility (e.g., appropriate roles, labels for chart elements).\n*   Styling: Primarily Tailwind CSS. Custom CSS/JS may be needed for the chart styling/interactivity, sidebar animation, and any complex table interactions if Tailwind alone is insufficient.\n\n**Testing Identifiers:**\n*   Header: `data-testid='dashboard-header'`\n*   User Profile Trigger: `data-testid='user-profile-trigger'`\n*   Sidebar: `data-testid='dashboard-sidebar'`\n*   Sidebar Toggle: `data-testid='sidebar-toggle'`\n*   Metric Cards (example): `data-testid='metric-card-1'`\n*   Sales Chart Container: `data-testid='sales-chart'`\n*   Orders Table: `data-testid='orders-table'`\n*   Sort by Date (in orders table): `data-testid='sort-orders-by-Date'`",
            "viewports_to_test": {"desktop": [1600, 900], "mobile": [414, 896]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Dashboard Header", "selector": "header[data-testid='dashboard-header']", "points": 1},
                {"type": "element_presence", "name": "Dashboard Sidebar", "selector": "nav[role='navigation'][data-testid='dashboard-sidebar']", "points": 1},
                {"type": "element_presence", "name": "Sidebar Toggle", "selector": "button[data-testid='sidebar-toggle']", "points": 1},
                {"type": "element_presence", "name": "Main Content Area", "selector": "main", "points": 1},
                {"type": "element_count", "name": "Metric Cards (min 3)", "selector": "[data-testid^='metric-card-']", "min_count": 3, "points": 2},
                {"type": "element_presence", "name": "Sales Chart Area", "selector": "[data-testid='sales-chart']", "points": 2, "note": "Checks for either canvas or svg within this area for chart presence."},
                {"type": "element_presence", "name": "Orders Table", "selector": "table[data-testid='orders-table']", "points": 2},
                {"type": "element_presence", "name": "Sort by Date (Orders Table)", "selector": "table[data-testid='orders-table'] th [data-testid='sort-orders-by-Date']", "points": 1},
                {
                    "type": "interaction", "name": "Sidebar Toggle Functionality", "points": 4,
                    "trigger_element": {"selector": "button[data-testid='sidebar-toggle']"},
                    "sequence": [
                        {"step_name": "Collapse Sidebar", "action": {"type":"click"}, "wait_for_outcome_ms": 700, 
                         "expected_outcomes": [
                             {"outcome_type": "attribute_change", "element_selector": "button[data-testid='sidebar-toggle']", "attribute_name": "aria-expanded", "expected_value": "false"},
                             {"outcome_type": "custom_script_evaluates_true", "script": "return document.querySelector(\"[data-testid='dashboard-sidebar']\").classList.contains('collapsed') || parseFloat(getComputedStyle(document.querySelector(\"[data-testid='dashboard-sidebar']\")).width) < 100;", "note":"Checks for class or significantly reduced width"}
                         ]},
                         {"step_name": "Expand Sidebar", "action": {"type":"click"}, "wait_for_outcome_ms": 700,
                         "expected_outcomes": [
                             {"outcome_type": "attribute_change", "element_selector": "button[data-testid='sidebar-toggle']", "attribute_name": "aria-expanded", "expected_value": "true"}
                         ]}
                    ]
                },
                {
                    "type": "interaction", "name": "Sort Orders Table by Date", "points": 4,
                    "trigger_element": {"selector": "table[data-testid='orders-table'] th [data-testid='sort-orders-by-Date']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type": "attribute_change", "element_selector": "table[data-testid='orders-table'] th:has([data-testid='sort-orders-by-Date'])", "attribute_name": "aria-sort", "expected_value_exists": true, "note": "Checks if aria-sort is set to 'ascending' or 'descending'"}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Chart Has Accessible Name (title/aria-label)", "script": "const chart = document.querySelector('[data-testid=\"sales-chart\"]'); if (!chart) return false; const canvasOrSvg = chart.querySelector('canvas, svg'); if (!canvasOrSvg) return false; return canvasOrSvg.getAttribute('aria-label') || canvasOrSvg.querySelector('title') || chart.getAttribute('aria-labelledby');", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC004_ECommerce_Product_Page_With_Image_Zoom_and_Reviews",
            "prompt_description": "Develop a detailed product page for an e-commerce site (e.g., for a 'High-Performance Laptop').\n\n**Page Structure & Features:**\n1.  **Product Gallery:** \n    *   Main product image (identifiable as `data-testid='main-product-image'`).\n    *   Several thumbnail images below it. Clicking a thumbnail updates the main product image.\n    *   **Image Zoom:** Hovering over the main product image should display a magnified version of that portion of the image, typically in an adjacent container or as an overlay (identifiable as `data-testid='image-zoom-view'`).\n2.  **Product Information:**\n    *   Product Name (H1).\n    *   Short Description.\n    *   Price (identifiable as `data-testid='product-price'`).\n    *   Variant Selection (e.g., Color, Storage Size - use `<select>` dropdowns or radio button groups). Changes here might update the price or image (optional complexity, but good to handle basic selection).\n    *   Quantity Selector (input type number, identifiable as `data-testid='quantity-input'`).\n    *   'Add to Cart' button (identifiable as `data-testid='add-to-cart-button'`).\n3.  **Product Details Tabs:**\n    *   An accessible tabbed interface (`role='tablist'`) with sections for 'Full Description', 'Specifications', and 'Customer Reviews'. Each tab and panel should follow ARIA best practices. The tab list should be `data-testid='product-tabs'`. Tab panels should be `data-testid='tab-panel-description'`, etc.\n4.  **Customer Reviews Tab Content:**\n    *   Display a few sample reviews (reviewer name, rating as stars, review text).\n    *   A form to submit a new review (similar to FPC002 but integrated here).\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML for the entire page. Logical heading structure.\n*   Responsive design. The image gallery, zoom feature, and tabs must work well on mobile.\n*   **Image Zoom Accessibility:** Ensure the zoom feature is usable with a keyboard if possible, or can be easily bypassed. Magnified content should be announced if it appears off-screen or significantly changes context.\n*   **Tab Interface Accessibility:** Must be fully keyboard navigable (arrow keys for tabs, Tab to panel content) and use correct ARIA attributes (`aria-selected`, `aria-controls`, etc.).\n*   All interactive elements must be accessible.\n*   Styling: Tailwind CSS primarily. Custom CSS/JS will be essential for the image zoom, thumbnail gallery logic, and potentially the tab interface if advanced styling/animation is desired.\n\n**Testing Identifiers:**\n*   Main Product Image: `data-testid='main-product-image'`\n*   Image Zoom View Area: `data-testid='image-zoom-view'`\n*   A Thumbnail Image (example): `data-testid='thumbnail-1'`\n*   Product Price Display: `data-testid='product-price'`\n*   Quantity Input: `data-testid='quantity-input'`\n*   Add to Cart Button: `data-testid='add-to-cart-button'`\n*   Product Tabs Container: `data-testid='product-tabs'`\n*   Description Tab Panel: `data-testid='tab-panel-description'`",
            "viewports_to_test": {"desktop": [1440, 900], "mobile": [390, 844]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Main Product Image", "selector": "img[data-testid='main-product-image']", "points": 2},
                {"type": "element_count", "name": "Thumbnail Images (min 2)", "selector": "img[data-testid^='thumbnail-']", "min_count": 2, "points": 2},
                {"type": "element_presence", "name": "Image Zoom View Area", "selector": "[data-testid='image-zoom-view']", "points": 2, "note": "May initially be hidden"},
                {"type": "element_presence", "name": "Add to Cart Button", "selector": "button[data-testid='add-to-cart-button']", "points": 1},
                {"type": "element_presence", "name": "Product Tabs Container", "selector": "[role='tablist'][data-testid='product-tabs']", "points": 2},
                {"type": "element_count", "name": "Tab Buttons (min 3)", "selector": "[data-testid='product-tabs'] [role='tab']", "min_count": 3, "points": 1},
                {
                    "type": "interaction", "name": "Thumbnail Click Updates Main Image", "points": 4,
                    "trigger_element": {"selector": "img[data-testid='thumbnail-2']"}, 
                    "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type": "attribute_change", "element_selector": "img[data-testid='main-product-image']", "attribute_name": "src", "expected_value_not_initial": true, "note": "Checks if src changes from initial value (requires initial src capture or knowing thumbnail's target src)"}
                    ]
                },
                {
                    "type": "interaction", "name": "Image Zoom on Hover", "points": 4, "viewports": ["desktop"],
                    "trigger_element": {"selector": "img[data-testid='main-product-image']"}, "action": {"type":"hover"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type": "visibility_change", "element_selector": "[data-testid='image-zoom-view']", "expected_visibility": "visible"}
                    ]
                },
                {
                    "type": "interaction", "name": "Tab Switching (e.g., to Specifications)", "points": 4,
                    "trigger_element": {"selector": "[data-testid='product-tabs'] [role='tab']:nth-child(2)"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type": "attribute_change", "element_selector": "[data-testid='product-tabs'] [role='tab']:nth-child(2)", "attribute_name": "aria-selected", "expected_value": "true"},
                        {"outcome_type": "visibility_change", "element_selector": "[data-testid='tab-panel-specifications']", "expected_visibility": "visible", "note": "Assumes second tab panel has this testid"},
                        {"outcome_type": "visibility_change", "element_selector": "[data-testid='tab-panel-description']", "expected_visibility": "hidden"}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Tablist Keyboard Nav (Arrow Key Focus)", "points": 3,
                 "script": "const tabs = document.querySelectorAll('[data-testid=\"product-tabs\"] [role=\"tab\"]'); if(tabs.length < 2) return true; tabs[0].focus(); tabs[0].dispatchEvent(new KeyboardEvent('keydown', {key: 'ArrowRight', bubbles: true})); return document.activeElement === tabs[1];",
                 "note": "Basic check for arrow key navigation between tabs."
                }
            ]
        },
        {
            "prompt_id": "FPC005_Interactive_Kanban_Board_UI",
            "prompt_description": "Develop a client-side interactive Kanban board (like Trello or Jira) with basic drag-and-drop functionality.\n\n**Board Structure & Features:**\n1.  **Columns:** Display at least three columns: 'To Do', 'In Progress', 'Done'. Each column should be clearly labeled (e.g., with an `<h2>`) and act as a drop zone. Columns should be identifiable `data-testid='kanban-column-todo'`, `data-testid='kanban-column-inprogress'`, etc.\n2.  **Cards:** \n    *   Each column should contain several task cards. Each card displays a task title and a brief description.\n    *   Cards MUST be draggable between columns. They should have `draggable='true'` attribute and be identifiable `data-testid='kanban-card-N'`.\n    *   Cards should also be editable in place (e.g., clicking card title makes it an input, saving on blur/Enter - medium complexity).\n3.  **Add New Card:** Provide a way to add a new card to the 'To Do' column (e.g., a button at the bottom of the column or a global 'Add Task' button that opens a small form/modal). The form should ask for a title and description. `data-testid='add-card-form'`.\n4.  **Drag and Drop:** Implement HTML5 drag and drop API to move cards between columns. When a card is dropped into a new column, it should visually move and its underlying data structure (if any in JS) should reflect the change of status.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML for the board, columns, and cards. Use `<ul>` or `<ol>` for lists of cards within columns if appropriate.\n*   **Drag and Drop Accessibility:** This is challenging. Provide keyboard alternatives for moving cards if possible (e.g., a context menu on the card with 'Move to In Progress' options). If full keyboard D&D is too complex, ensure users can still manage tasks without a mouse (e.g., edit, delete, add, potentially move via other means). At a minimum, draggable items should be focusable.\n*   Visual feedback during drag (e.g., highlighting drop zones, ghost image of card).\n*   The board should be responsive. Columns might stack on mobile, or horizontal scrolling might be enabled for the board container.\n*   Styling: Tailwind CSS. Custom CSS/JS will be critical for drag-and-drop visuals, card editing, and potentially complex responsive column layouts.\n\n**Testing Identifiers:**\n*   To Do Column: `data-testid='kanban-column-todo'`\n*   In Progress Column: `data-testid='kanban-column-inprogress'`\n*   Done Column: `data-testid='kanban-column-done'`\n*   A Draggable Card: `data-testid='kanban-card-1'`\n*   Add Card Form: `data-testid='add-card-form'` or trigger `data-testid='add-card-button'`",
            "viewports_to_test": {"desktop": [1920, 1080], "mobile": [375, 667]},
            "adherence_checks": [
                {"type": "element_presence", "name": "To Do Column", "selector": "[data-testid='kanban-column-todo']", "points": 2},
                {"type": "element_presence", "name": "In Progress Column", "selector": "[data-testid='kanban-column-inprogress']", "points": 2},
                {"type": "element_presence", "name": "Done Column", "selector": "[data-testid='kanban-column-done']", "points": 2},
                {"type": "element_count", "name": "Draggable Cards (min 3 total)", "selector": "[data-testid^='kanban-card-'][draggable='true']", "min_count": 3, "points": 2},
                {"type": "element_presence", "name": "Add Card Mechanism", "selector": "[data-testid='add-card-form'], [data-testid='add-card-button']", "points": 2, "note":"Checks for either the form or a button to trigger it"},
                {
                    "type": "interaction", "name": "Drag Card from ToDo to InProgress", "points": 7, "viewports": ["desktop"],
                    "trigger_element": {"selector": "[data-testid='kanban-column-todo'] [data-testid^='kanban-card-']:first-child"},
                    "action": {"type": "drag_and_drop", "target_element_selector": "[data-testid='kanban-column-inprogress']"},
                    "wait_for_outcome_ms": 1000,
                    "expected_outcomes": [
                        {"outcome_type": "custom_script_evaluates_true", "script": "const card = document.querySelector(\"[data-testid='kanban-column-inprogress'] [data-testid^='kanban-card-']:first-child\"); const todoCol = document.querySelector(\"[data-testid='kanban-column-todo']\"); return card && !todoCol.contains(card);", "note": "Checks if a card is now in InProgress and not in ToDo (simplistic check, assumes one card moved)"}
                    ]
                },
                {
                    "type": "interaction", "name": "Add New Card to ToDo", "points": 5,
                    "initial_setup": [{"action_type":"execute_script", "script":"const form = document.querySelector('[data-testid=add-card-form]'); if(form && form.reset) form.reset();"}],
                    "sequence": [
                        {"step_name": "Open Add Card Form (if button exists)", "trigger_element": {"selector": "[data-testid='add-card-button']", "optional":true}, "action": {"type":"click"}, "wait_for_outcome_ms":300},
                        {"step_name": "Fill and Submit New Card", "action": {"type":"execute_script", "script": "document.querySelector('[data-testid=add-card-form] input[type=text]').value = 'New Test Card'; document.querySelector('[data-testid=add-card-form] textarea').value = 'Description for test.'; document.querySelector('[data-testid=add-card-form] button[type=submit]').click();"}, "wait_for_outcome_ms":500}
                    ],
                    "expected_outcomes": [
                        {"outcome_type": "text_content_change", "element_selector": "[data-testid='kanban-column-todo'] [data-testid^='kanban-card-']:last-child", "expected_text": "New Test Card", "match_type":"contains", "note":"Checks if new card appears in ToDo column"}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Cards are Focusable (for A11y D&D alternative prep)", "script": "return Array.from(document.querySelectorAll(\"[data-testid^='kanban-card-']\")).every(card => card.hasAttribute('tabindex') || card.querySelector('button, a'));", "points": 3, "note":"Draggable items should be focusable"}
            ]
        },
        {
            "prompt_id": "FPC006_Social_Media_Feed_Infinite_Scroll",
            "prompt_description": "Simulate a social media feed (like Twitter/X or Facebook) with posts and **infinite scrolling** to load more posts.\n\n**Page Structure & Features:**\n1.  **Main Layout:** Header (simple title), Main content area for the feed, Footer (optional).\n2.  **Post Component:** Each post in the feed should display:\n    *   User Avatar and Name.\n    *   Post Timestamp.\n    *   Post Content (text, maybe a placeholder for an image).\n    *   Action buttons: 'Like' (with count, toggles `aria-pressed`), 'Comment' (no action needed), 'Share' (no action needed).\n    *   Each post identifiable as `data-testid='feed-post-N'`.\n    *   Like button on each post: `data-testid='like-btn-postN'`.\n3.  **Feed Container (`data-testid='social-feed-container'`):**\n    *   Initially load a set of (e.g., 5-10) posts.\n    *   **Infinite Scroll:** As the user scrolls towards the bottom of the feed container, new posts should be dynamically fetched (simulated by JS, no actual API call needed, just append more generated post elements) and added to the feed. \n    *   A loading indicator (`data-testid='feed-loading-indicator'`) should be visible while new posts are being 'fetched' and appended.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. Posts could be `<article>` elements.\n*   The infinite scroll MUST NOT break keyboard navigation or trap focus. Users should still be able to navigate through all loaded posts using the keyboard.\n*   New content loaded via infinite scroll should be announced to assistive technologies if possible (e.g., using an `aria-live` region that briefly states 'More posts loaded').\n*   The 'Like' button interaction should be fully accessible.\n*   The page must be responsive.\n*   Styling: Tailwind CSS primarily. Custom JS is essential for the infinite scroll logic, post generation, like button state, and loading indicator.\n\n**Testing Identifiers:**\n*   Feed Container: `data-testid='social-feed-container'`\n*   An individual Post: `data-testid='feed-post-1'` (example)\n*   Like button on a post: `data-testid='like-btn-post1'` (example)\n*   Loading Indicator: `data-testid='feed-loading-indicator'`\n*   ARIA Live region for new content: `data-testid='feed-update-announcer'` (optional but good)",
            "viewports_to_test": {"desktop": [1024, 768], "mobile": [375, 812]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Social Feed Container", "selector": "[data-testid='social-feed-container']", "points": 2},
                {"type": "element_count", "name": "Initial Posts Loaded (min 5)", "selector": "[data-testid='social-feed-container'] [data-testid^='feed-post-']", "min_count": 5, "points": 3},
                {"type": "element_presence", "name": "Example Like Button", "selector": "[data-testid^='like-btn-post']", "points": 1},
                {"type": "element_presence", "name": "Loading Indicator (may be initially hidden)", "selector": "[data-testid='feed-loading-indicator']", "points": 2},
                {
                    "type": "interaction", "name": "Like Button Toggles ARIA", "points": 4,
                    "trigger_element": {"selector": "[data-testid^='like-btn-post']:first-of-type"}, "action": {"type":"click"}, "wait_for_outcome_ms":300,
                    "expected_outcomes": [
                        {"outcome_type": "attribute_change", "element_selector": "[data-testid^='like-btn-post']:first-of-type", "attribute_name": "aria-pressed", "expected_value": "true"}
                    ]
                },
                {
                    "type": "interaction", "name": "Infinite Scroll Loads More Posts", "points": 8,
                    "initial_setup": [{"action_type": "get_element_count", "selector": "[data-testid^='feed-post-']", "store_as": "initialPostCount"}],
                    "trigger_action_on_load": false, 
                    "action_sequence_for_trigger": [ 
                        {"action_type": "execute_script", "script": "window.scrollTo(0, document.body.scrollHeight);"}
                    ],
                    "wait_for_outcome_ms": 3000, 
                    "expected_outcomes": [
                        {"outcome_type": "custom_script_evaluates_true", "script": "const finalPostCount = document.querySelectorAll(\"[data-testid^='feed-post-']\").length; return finalPostCount > window.initialPostCount;", "note": "Checks if more posts were loaded than initially present."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Loading Indicator Appears During Load (Hard to test precisely)", "script": "/* This would require intercepting JS or very precise timing. For now, assume it's briefly visible. A more robust test needs advanced tooling. */ return true;", "points": 1, "note":"This is a very difficult state to reliably catch without deeper hooks."},
                {"type": "element_presence", "name": "ARIA Live Announcer (Optional)", "selector": "[data-testid='feed-update-announcer'][aria-live]", "points": 1, "optional": true}
            ]
        },
        {
            "prompt_id": "FPC007_Multi_Step_Wizard_Form_with_Validation_and_Summary",
            "prompt_description": "Create a complex multi-step wizard form for event registration. The wizard should have at least 3 steps, client-side validation at each step, a progress indicator, and a final summary/confirmation step.\n\n**Wizard Steps & Content:**\n1.  **Step 1: Personal Information (`data-testid='wizard-step-1'`)**\n    *   Fields: Full Name (required), Email (required, valid email), Phone Number.\n    *   'Next' button to proceed.\n2.  **Step 2: Event Preferences (`data-testid='wizard-step-2'`)**\n    *   Fields: Ticket Type (select dropdown: Standard, VIP), Number of Tickets (input number, min 1), Dietary Restrictions (textarea).\n    *   'Previous' and 'Next' buttons.\n3.  **Step 3: Payment Details (Structure Only - `data-testid='wizard-step-3'`)**\n    *   Placeholder fields for Card Number, Expiry Date, CVV. (No actual payment processing).\n    *   'Previous' and 'Next' buttons.\n4.  **Step 4: Review & Confirm (`data-testid='wizard-step-4'`)**\n    *   Display a summary of all information entered in previous steps.\n    *   'Previous' button and a 'Confirm Registration' button (`data-testid='confirm-registration-btn'`).\n5.  **Success Message:** After confirming, hide the wizard and show a success message (`data-testid='registration-success-msg'`).\n\n**Core Features:**\n*   **Progress Indicator:** Visually show current step and total steps (e.g., 'Step 1 of 4'). Identifiable as `data-testid='wizard-progress-indicator'`.\n*   **Navigation:** Users must be able to navigate between steps using 'Next'/'Previous' buttons.\n*   **Client-Side Validation:** Each step's 'Next' button should trigger validation for its fields. If invalid, display clear error messages next to fields (e.g., in a `div` with `data-testid='error-fieldName'`) and prevent progression.\n*   **State Management:** Data entered in each step should persist when navigating back and forth.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. The wizard itself could be a large `<form>` or a series of fieldsets within a form.\n*   ARIA: Use `aria-current='step'` on the current step in the progress indicator. Manage focus appropriately when navigating steps (e.g., focus first field of new step).\n*   Responsive design for all steps and form elements.\n*   All form elements MUST have associated labels. Error messages should be programmatically linked to inputs using `aria-describedby`.\n*   Styling: Tailwind CSS. Custom CSS/JS for visual styling of progress bar, step transitions (optional animation), and dynamic error message display.\n\n**Testing Identifiers:**\n*   Wizard container: `data-testid='event-wizard-form'`\n*   Step 1 container: `data-testid='wizard-step-1'` (and similar for other steps)\n*   Progress Indicator: `data-testid='wizard-progress-indicator'`\n*   Full Name Input: `data-testid='input-fullName'`\n*   Email Input: `data-testid='input-email'`\n*   Error for Full Name: `data-testid='error-fullName'`\n*   Confirm Registration Button: `data-testid='confirm-registration-btn'`\n*   Success Message: `data-testid='registration-success-msg'`",
            "viewports_to_test": {"desktop": [1280, 800], "mobile": [390, 844]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Wizard Form Container", "selector": "form[data-testid='event-wizard-form']", "points": 1},
                {"type": "element_presence", "name": "Step 1 Visible Initially", "selector": "[data-testid='wizard-step-1']", "points": 1, "check_visibility": true},
                {"type": "element_presence", "name": "Progress Indicator", "selector": "[data-testid='wizard-progress-indicator']", "points": 2},
                {"type": "element_presence", "name": "Full Name Input", "selector": "input[data-testid='input-fullName']", "points": 1},
                {"type": "element_presence", "name": "Email Input", "selector": "input[data-testid='input-email']", "points": 1},
                {
                    "type": "interaction", "name": "Step 1 Validation (Empty Name)", "points": 4,
                    "trigger_element": {"selector": "[data-testid='wizard-step-1'] button:contains('Next')"}, 
                    "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type": "text_content_exists", "element_selector": "[data-testid='error-fullName']"},
                        {"outcome_type": "visibility_check_multiple", "selectors_expected_visible": ["[data-testid='wizard-step-1']"], "selectors_expected_hidden": ["[data-testid='wizard-step-2']"], "note":"Stays on step 1"}
                    ]
                },
                {
                    "type": "interaction", "name": "Navigate to Step 2 and Back", "points": 5,
                    "sequence": [
                        {"step_name": "Fill Step 1", "action":{"type":"execute_script", "script":"document.querySelector('[data-testid=input-fullName]').value='Test User'; document.querySelector('[data-testid=input-email]').value='test@example.com';"}},
                        {"step_name": "Click Next to Step 2", "trigger_element": {"selector": "[data-testid='wizard-step-1'] button:contains('Next')"}, "action":{"type":"click"}, "wait_for_outcome_ms":500,
                         "expected_outcomes": [{"outcome_type":"visibility_change", "element_selector":"[data-testid='wizard-step-2']", "expected_visibility":"visible"}]},
                        {"step_name": "Click Previous to Step 1", "trigger_element": {"selector": "[data-testid='wizard-step-2'] button:contains('Previous')"}, "action":{"type":"click"}, "wait_for_outcome_ms":500,
                         "expected_outcomes": [
                             {"outcome_type":"visibility_change", "element_selector":"[data-testid='wizard-step-1']", "expected_visibility":"visible"},
                             {"outcome_type":"attribute_value", "element_selector":"input[data-testid='input-fullName']", "attribute_name":"value", "expected_value":"Test User", "note":"Data persistence"}
                          ]}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Progress Indicator Updates (aria-current)", "script": "const progress = document.querySelector('[data-testid=\"wizard-progress-indicator\"]'); if(!progress) return false; /* Assuming steps are marked with aria-current='step' */ return !!progress.querySelector('[aria-current=\"step\"]');", "points": 3},
                {"type": "custom_script_evaluates_true", "name": "Form Inputs Have Labels", "script": "return Array.from(document.querySelectorAll('form[data-testid=event-wizard-form] input:not([type=submit]):not([type=hidden]), form[data-testid=event-wizard-form] select, form[data-testid=event-wizard-form] textarea')).every(el => el.id && document.querySelector(`label[for='${el.id}']`));", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC008_Realtime_Collaborative_Text_Editor_Simulation",
            "prompt_description": "Simulate a basic real-time collaborative text editor interface (like a simplified Google Docs). Focus is on the UI and client-side simulation of collaboration.\n\n**UI Components:**\n1.  **Main Text Area:** A large, editable content area (e.g., a `div` with `contenteditable='true'` or a `<textarea>`). This is where the main document content goes. Identifiable as `data-testid='editor-content-area'`.\n2.  **User Cursors/Selections (Simulated):**\n    *   Simulate the presence of 1-2 other 'collaborators'. When the page loads, display 'cursors' (small styled `div`s or `span`s) at random positions within the text content to represent other users. These should have a user's name associated (e.g., as a tooltip or a small label). Example: `data-testid='cursor-user-Alice'`.\n    *   Optionally, simulate a text selection by another user (e.g., by applying a background color to a range of text and associating it with a user).\n3.  **Toolbar (Basic):**\n    *   Buttons for Bold, Italic, Underline. These should apply/remove formatting to the selected text in the main editor area. (Using `document.execCommand` is acceptable for this simulation, despite its deprecation, or implement custom rich text logic if ambitious). Toolbar: `data-testid='editor-toolbar'`. Bold button: `data-testid='toolbar-bold-btn'`.\n4.  **Live Changes Simulation:**\n    *   After a few seconds of page load, simulate another user typing by programmatically inserting a short string (e.g., '... added by Bob ...') into the main editor content at a specific point.\n    *   This change should appear without the current user directly typing it.\n\n**Technical & Accessibility Requirements:**\n*   Semantic HTML. The editable area needs careful ARIA role consideration if not a standard form element (e.g., `role='textbox'`, `aria-multiline='true'`).\n*   The simulated cursors and selections must not interfere with the primary user's ability to edit the document or navigate it with a keyboard.\n*   Toolbar buttons must be keyboard accessible and indicate their state (e.g., if selected text is bold, Bold button appears pressed using `aria-pressed`).\n*   Changes made by 'other users' should be announced by an `aria-live` region (`data-testid='collaboration-updates'`) to inform assistive technology users (e.g., 'Bob made an edit').\n*   Responsive design for the editor interface.\n*   Styling: Tailwind CSS, with custom CSS/JS for the editor functionality, cursor simulation, rich text commands, and live update announcements.\n\n**Testing Identifiers:**\n*   Editor Content Area: `data-testid='editor-content-area'`\n*   A Simulated User Cursor: `data-testid='cursor-user-Alice'`\n*   Editor Toolbar: `data-testid='editor-toolbar'`\n*   Bold Button: `data-testid='toolbar-bold-btn'`\n*   Collaboration Updates Announcer: `data-testid='collaboration-updates'`",
            "viewports_to_test": {"desktop": [1600, 900], "mobile": [414, 736]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Editor Content Area", "selector": "[data-testid='editor-content-area'][contenteditable='true'], textarea[data-testid='editor-content-area']", "points": 3},
                {"type": "element_presence", "name": "At least one Simulated User Cursor", "selector": "[data-testid^='cursor-user-']", "points": 3},
                {"type": "element_presence", "name": "Editor Toolbar", "selector": "[data-testid='editor-toolbar']", "points": 2},
                {"type": "element_presence", "name": "Bold Button", "selector": "button[data-testid='toolbar-bold-btn']", "points": 2},
                {"type": "element_presence", "name": "Collaboration Updates Announcer", "selector": "[data-testid='collaboration-updates'][aria-live]", "points": 2},
                {
                    "type": "interaction", "name": "Apply Bold Formatting", "points": 5,
                    "initial_setup": [{"action_type":"execute_script", "script":"const editor = document.querySelector('[data-testid=editor-content-area]'); editor.focus(); editor.innerHTML = 'Sample text.'; const range = document.createRange(); range.selectNodeContents(editor); const sel = window.getSelection(); sel.removeAllRanges(); sel.addRange(range);"}], 
                    "trigger_element": {"selector": "button[data-testid='toolbar-bold-btn']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type": "custom_script_evaluates_true", "script": "return document.queryCommandState && document.queryCommandState('bold') || document.querySelector('[data-testid=editor-content-area] b, [data-testid=editor-content-area] strong');", "note":"Checks execCommand state or presence of b/strong tags"},
                        {"outcome_type": "attribute_change", "element_selector": "button[data-testid='toolbar-bold-btn']", "attribute_name": "aria-pressed", "expected_value": "true"}
                    ]
                },
                {
                    "type": "text_content_change_dynamic", "name": "Simulated Collaborative Edit Appears", "element_selector": "[data-testid='editor-content-area']",
                    "initial_wait_ms": 3000, "poll_interval_ms": 1000, "num_checks": 1, "look_for_substring": "added by", 
                    "points": 5, "note": "Waits for simulated remote edit to appear."
                },
                {"type": "custom_script_evaluates_true", "name": "Editor Area has ARIA Role if ContentEditable Div", "script": "const editor = document.querySelector('[data-testid=\"editor-content-area\"]'); if (editor && editor.isContentEditable && editor.tagName !== 'TEXTAREA') return editor.getAttribute('role') === 'textbox' && editor.getAttribute('aria-multiline') === 'true'; return true;", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC009_Flight_Booking_System_Interface",
            "prompt_description": "Design the UI for a flight booking system's main search and results page. This is a highly interactive and complex interface.\n\n**Page Components & Flow:**\n1.  **Search Form (`data-testid='flight-search-form'`):**\n    *   Inputs: 'From' (Origin airport - text input with autocomplete suggestions, simulated), 'To' (Destination airport - text input with autocomplete, simulated), 'Departure Date' (date picker), 'Return Date' (date picker, disabled/hidden for one-way), 'Passengers' (number input).\n    *   Options: 'One-way' / 'Round-trip' (radio buttons, affects Return Date visibility/state).\n    *   'Search Flights' button (`data-testid='search-flights-btn'`).\n2.  **Search Results Area (`data-testid='flight-results-area'`):**\n    *   Initially empty or shows a 'Search for flights to see results' message.\n    *   After search (simulated - generate 5-10 fake flight results): Display results as cards or rows. Each result shows: Airline Logo & Name, Departure/Arrival Times, Duration, Price, 'Select Flight' button.\n    *   Each flight result item should be `data-testid='flight-result-item-N'`.\n3.  **Filtering & Sorting Options for Results:**\n    *   Filters (applied client-side to simulated results): Price Range (slider or min/max inputs), Number of Stops (checkboxes: Non-stop, 1 stop, 2+ stops), Airlines (multi-select checkboxes).\n    *   Filter controls container: `data-testid='results-filters'`.\n    *   Sorting: Sort results by Price (low-high, high-low), Duration (shortest first). Sort controls container: `data-testid='results-sort-controls'`.\n4.  **Selected Flight Summary (Optional):** A small sidebar or section showing details of a selected flight before proceeding to booking.\n\n**Technical & Accessibility Requirements:**\n*   Full semantic page structure.\n*   **Date Pickers:** Must be accessible and keyboard navigable. If using a library, ensure it's reputable for A11y. If custom, implement ARIA grid pattern for calendar.\n*   **Autocomplete (Simulated):** As user types in Origin/Destination, show a dropdown list of matching airport suggestions (use a static JS array of 5-10 airport names for simulation). Must be keyboard navigable (arrows to select, Enter to confirm). Autocomplete list: `data-testid='autocomplete-suggestions'`.\n*   Dynamic updates: Toggling One-way/Round-trip changes form. Applying filters/sorts updates results instantly.\n*   All interactive elements need proper ARIA attributes and focus management.\n*   Responsive: Search form, results, and filters must be usable on mobile.\n*   Styling: Tailwind. Significant custom JS for interactions, date pickers (if custom), autocomplete, filtering/sorting logic, and dynamic result rendering.\n\n**Testing Identifiers:**\n*   Search Form: `data-testid='flight-search-form'`\n*   Origin Input: `data-testid='input-origin'`\n*   Destination Input: `data-testid='input-destination'`\n*   Departure Date Input: `data-testid='input-departure-date'`\n*   Search Flights Button: `data-testid='search-flights-btn'`\n*   Flight Results Area: `data-testid='flight-results-area'`\n*   A Flight Result Item: `data-testid='flight-result-item-1'`\n*   Results Filters Container: `data-testid='results-filters'`\n*   Price Filter (example): `data-testid='filter-price-min'`\n*   Results Sort Controls: `data-testid='results-sort-controls'`\n*   Sort by Price Button: `data-testid='sort-by-price'`",
            "viewports_to_test": {"desktop": [1920, 1080], "mobile": [390, 844]},
            "adherence_checks": [
                {"type": "element_presence", "name": "Flight Search Form", "selector": "form[data-testid='flight-search-form']", "points": 2},
                {"type": "element_presence", "name": "Origin Input", "selector": "input[data-testid='input-origin']", "points": 1},
                {"type": "element_presence", "name": "Destination Input", "selector": "input[data-testid='input-destination']", "points": 1},
                {"type": "element_presence", "name": "Departure Date Input", "selector": "[data-testid='input-departure-date']", "points": 1, "note":"Could be input or custom component root"},
                {"type": "element_presence", "name": "Search Flights Button", "selector": "button[data-testid='search-flights-btn']", "points": 1},
                {"type": "element_presence", "name": "Flight Results Area", "selector": "[data-testid='flight-results-area']", "points": 1},
                {"type": "element_presence", "name": "Results Filters Container", "selector": "[data-testid='results-filters']", "points": 1},
                {"type": "element_presence", "name": "Results Sort Controls Container", "selector": "[data-testid='results-sort-controls']", "points": 1},
                {
                    "type": "interaction", "name": "Simulate Search and Display Results", "points": 6,
                    "trigger_element": {"selector": "button[data-testid='search-flights-btn']"}, "action": {"type":"click"}, "wait_for_outcome_ms":1500, 
                    "expected_outcomes": [
                        {"outcome_type": "element_count", "parent_element_selector": "[data-testid='flight-results-area']", "child_element_selector": "[data-testid^='flight-result-item-']", "min_count": 3, "note":"Checks if at least some results are rendered."}
                    ]
                },
                {
                    "type": "interaction", "name": "Autocomplete Suggestion Appears for Origin", "points": 5,
                    "trigger_element": {"selector": "input[data-testid='input-origin']"}, "action": {"type":"type_text", "text_to_type":"New"}, "wait_for_outcome_ms":1000, 
                    "expected_outcomes": [
                        {"outcome_type": "visibility_change", "element_selector": "[data-testid='autocomplete-suggestions']", "expected_visibility":"visible"},
                        {"outcome_type": "element_count", "parent_element_selector": "[data-testid='autocomplete-suggestions']", "child_element_selector": "li, div.suggestion-item", "min_count":1, "note":"Checks if suggestions appear."}
                    ]
                },
                {"type": "custom_script_evaluates_true", "name": "Date Picker is Accessible (basic check for ARIA attributes)", "script": "const datepicker = document.querySelector('[data-testid=input-departure-date]'); if(!datepicker) return false; return datepicker.hasAttribute('aria-label') || datepicker.hasAttribute('aria-labelledby') || (datepicker.closest('div').querySelector('input[type=text]') && datepicker.closest('div').querySelector('input[type=text]').hasAttribute('aria-haspopup'));", "points": 3, "note": "Very basic check, real datepicker a11y is complex."},
                {"type": "custom_script_evaluates_true", "name": "Round-trip Toggle Affects Return Date", "script": "const oneWayRadio = document.querySelector('input[type=radio][value=one-way]'); const roundTripRadio = document.querySelector('input[type=radio][value=round-trip]'); const returnDateInput = document.querySelector('[data-testid=input-return-date]'); if(!oneWayRadio || !roundTripRadio || !returnDateInput) return false; roundTripRadio.click(); if(returnDateInput.disabled || getComputedStyle(returnDateInput).display === 'none') return false; oneWayRadio.click(); return returnDateInput.disabled || getComputedStyle(returnDateInput).display === 'none';", "points": 3}
            ]
        },
        {
            "prompt_id": "FPC010_WYSIWYG_Rich_Text_Editor_with_Image_Upload_and_Tables",
            "prompt_description": "Develop a sophisticated WYSIWYG (What You See Is What You Get) Rich Text Editor similar to those found in CMS systems or advanced blogging platforms. This is a highly complex front-end challenge.\n\n**Core Features:**\n1.  **Editable Content Area (`data-testid='wysiwyg-editor'`):** A `div` with `contenteditable='true'`, serving as the primary editing surface. Must support `role='textbox'` and `aria-multiline='true'`.\n2.  **Comprehensive Toolbar (`data-testid='wysiwyg-toolbar'`):**\n    *   **Text Formatting:** Bold, Italic, Underline, Strikethrough, Subscript, Superscript.\n    *   **Block Formatting:** Paragraph, Heading Levels (H1-H6 via a dropdown/select).\n    *   **List Formatting:** Unordered List, Ordered List.\n    *   **Alignment:** Left, Center, Right, Justify.\n    *   **Links:** Create/Edit Hyperlink (should open a small modal to input URL and text).\n    *   **Image Upload (Simulated):** A button to 'Insert Image'. Clicking it should open a prompt/modal asking for an image URL. Upon providing a URL, the image is inserted into the editor content. Image should be resizable (basic handles or fixed size options).\n    *   **Table Insertion:** A button to 'Insert Table'. Opens a small modal/grid to select table dimensions (e.g., 3x2 grid). Inserts an empty, editable HTML table into the editor.\n    *   **Undo/Redo:** Buttons for undoing and redoing actions.\n3.  **Output:** A mechanism to get the HTML content of the editor (e.g., a button 'View HTML' that displays the editor's `innerHTML` in a `<pre>` tag or logs to console).\n\n**Technical & Accessibility Requirements:**\n*   **Rich Text Engine:** MUST implement logic for applying and removing formatting using `document.execCommand` (understanding its limitations for a simulation is fine) or preferably by directly manipulating the DOM and selection ranges for more robust behavior. This is the core challenge.\n*   **Toolbar Accessibility:** All toolbar buttons MUST be proper `<button>` elements, fully keyboard accessible, and use `aria-pressed` to indicate active states for toggleable formats (Bold, Italic). Dropdowns (e.g., for Headings) must follow ARIA menu/listbox patterns.\n*   **Editor Accessibility:** The contenteditable area itself must be navigable. Semantic meaning of formatted text (e.g., headings are `<h1>`, lists are `<ul>`) must be preserved in the underlying HTML.\n*   **Modals (for Links, Image, Table):** Must be accessible (trap focus, Escape to close, proper ARIA roles like `dialog`).\n*   **Image and Table Manipulation:** Inserted images should be focusable and ideally have basic resizing. Inserted tables should allow typing into cells.\n*   Responsive toolbar and editor area.\n*   Styling: Tailwind CSS where appropriate, but significant custom CSS/JS will be required for the toolbar's appearance, button states, modal dialogs, and the editor's behavior (e.g., custom list styling if not using default, table cell borders within editor).\n\n**Testing Identifiers:**\n*   Editable Content Area: `data-testid='wysiwyg-editor'`\n*   Toolbar: `data-testid='wysiwyg-toolbar'`\n*   Bold Button: `data-testid='toolbar-btn-bold'`\n*   Heading Selector (dropdown/select): `data-testid='toolbar-select-heading'`\n*   Insert Image Button: `data-testid='toolbar-btn-image'`\n*   Insert Table Button: `data-testid='toolbar-btn-table'`\n*   Link Modal (example input): `data-testid='link-modal-url-input'`\n*   View HTML Output Area (if used): `data-testid='html-output-area'`",
            "viewports_to_test": {"desktop": [1920, 1080], "mobile": [414, 896]},
            "adherence_checks": [
                {"type": "element_presence", "name": "WYSIWYG Editor Area", "selector": "[data-testid='wysiwyg-editor'][contenteditable='true'][role='textbox'][aria-multiline='true']", "points": 3},
                {"type": "element_presence", "name": "WYSIWYG Toolbar", "selector": "[data-testid='wysiwyg-toolbar']", "points": 2},
                {"type": "element_presence", "name": "Bold Button in Toolbar", "selector": "[data-testid='wysiwyg-toolbar'] button[data-testid='toolbar-btn-bold']", "points": 1},
                {"type": "element_presence", "name": "Heading Selector in Toolbar", "selector": "[data-testid='wysiwyg-toolbar'] [data-testid='toolbar-select-heading']", "points": 1, "note":"Could be select or button opening menu"},
                {"type": "element_presence", "name": "Insert Image Button", "selector": "[data-testid='wysiwyg-toolbar'] button[data-testid='toolbar-btn-image']", "points": 1},
                {"type": "element_presence", "name": "Insert Table Button", "selector": "[data-testid='wysiwyg-toolbar'] button[data-testid='toolbar-btn-table']", "points": 1},
                {
                    "type": "interaction", "name": "Apply Bold and Check State", "points": 5,
                    "initial_setup": [{"action_type":"execute_script", "script":"const editor = document.querySelector('[data-testid=wysiwyg-editor]'); editor.focus(); editor.innerHTML = 'Format me.'; const range = document.createRange(); range.selectNodeContents(editor.firstChild); const sel = window.getSelection(); sel.removeAllRanges(); sel.addRange(range);"}],
                    "trigger_element": {"selector": "button[data-testid='toolbar-btn-bold']"}, "action": {"type":"click"}, "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type": "custom_script_evaluates_true", "script": "return document.queryCommandState && document.queryCommandState('bold') || document.querySelector('[data-testid=wysiwyg-editor] b, [data-testid=wysiwyg-editor] strong');"},
                        {"outcome_type": "attribute_change", "element_selector": "button[data-testid='toolbar-btn-bold']", "attribute_name": "aria-pressed", "expected_value": "true"}
                    ]
                },
                {
                    "type": "interaction", "name": "Insert H2 Heading (Simulated)", "points": 4,
                    "initial_setup": [{"action_type":"execute_script", "script":"const editor = document.querySelector('[data-testid=wysiwyg-editor]'); editor.focus(); editor.innerHTML = 'Make me a heading'; /* Select text here if needed by implementation */"}],
                    "trigger_element": {"selector": "[data-testid='toolbar-select-heading']", "note":"This might need to target an option if it's a select, or a menu item if it's a button dropdown"},
                    "action": {"type":"select_option_or_click_if_button", "value_or_text_to_find":"H2"}, 
                    "wait_for_outcome_ms":500,
                    "expected_outcomes": [
                        {"outcome_type": "element_exists", "element_selector": "[data-testid='wysiwyg-editor'] h2"}
                    ]
                },
                {
                    "type": "interaction", "name": "Insert Image (Simulated via Prompt)", "points": 4,
                     "initial_setup": [{"action_type":"execute_script", "script":"window.prompt = () => 'https://via.placeholder.com/150';"}], 
                     "trigger_element": {"selector": "button[data-testid='toolbar-btn-image']"}, "action": {"type":"click"}, "wait_for_outcome_ms":1000,
                     "expected_outcomes": [
                         {"outcome_type": "element_exists", "element_selector": "[data-testid='wysiwyg-editor'] img[src='https://via.placeholder.com/150']"}
                     ]
                },
                {"type": "custom_script_evaluates_true", "name": "Undo/Redo Buttons Exist", "script": "return !!(document.querySelector('[data-testid=wysiwyg-toolbar] button[aria-label*=Undo]') && document.querySelector('[data-testid=wysiwyg-toolbar] button[aria-label*=Redo]'));", "points": 2, "note": "Checks for presence of undo/redo by aria-label."}
            ]
        }
    ]
}